import java.io.File;
import java.io.FileNotFoundException;
import java.nio.charset.StandardCharsets;
import java.util.*;

public class main {
    private static final Set<String> stopWords = new HashSet<>(Set.of("the", "and", "is", "of", "in", "to", "a", "for"));

    public static String readfromandstore(String filePath) {
        File file = new File(filePath);
        StringBuilder theFile = new StringBuilder();
        try (Scanner sc = new Scanner(file, StandardCharsets.UTF_8.name())) {
            while (sc.hasNextLine()) {
                theFile.append(sc.nextLine());
                theFile.append(" ");
            }
        } catch (FileNotFoundException e) {
            System.out.println("File not found. Please provide a valid file location.");
            return null;
        }
        return theFile.toString();
    }

    public static void main(String[] args) {
        Scanner scans = new Scanner(System.in);
        String q = null;
        int choice = 0;
        int counter = 0;
        int anothercount = 0;
        Map<String, Integer> wordCountMap = new HashMap<>();
do {

    System.out.println("please select 1 for text and 2 for txt file location ");

    if (scans.hasNextInt()) {
        choice = scans.nextInt();
        switch (choice) {
            case 1:
                System.out.println("please provide your text ");
                scans.nextLine();
                q = scans.nextLine();
                break;
            case 2:
                System.out.println("please provide your txt file location ");
                q = readfromandstore(scans.next());
                if (q == null) {
                    choice = 0;
                }
                break;
            default:
                System.out.println("Invalid input. Please input 1 or 2 only!");
                break;
        }
    } else {
        System.out.println("Invalid input. Please input 1 or 2 only!");
        scans.next();
    }
}
     while (choice != 1 && choice != 2);
        String splitter[] = q.split("[,.;\\s]+");
        for (String word : splitter) {
            counter++;
            if (!stopWords.contains(word.toLowerCase())) {
                anothercount++;
            }
            wordCountMap.put(word, wordCountMap.getOrDefault(word, 0) + 1);
        }

        System.out.println("Word counts:");
        for (Map.Entry<String, Integer> entry : wordCountMap.entrySet()) {
            System.out.println("Word: " + entry.getKey() + ", Count: " + entry.getValue());
        }
            System.out.println("there are " + counter + " words present in this String");
            System.out.println("if we ignore stop words , we get "+ anothercount + " words" );

    }
}
